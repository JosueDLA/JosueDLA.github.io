{"version":3,"sources":["webpack://josuedla/./src/components/Blog/PostCard.tsx","webpack://josuedla/./src/templates/PostTag.tsx"],"names":["PostCardWrapper","styled","ImageWrapper","DescriptionWrapper","PostTitle","PostDescription","PostTags","PostCard","pageContext","data","location","PostCardItems","currentPage","numPages","pagePath","pathname","replace","pathPrefix","tag","toLowerCase","isFirst","isLast","previous","next","posts","allMdx","edges","title","id","className","map","post","key","node","frontmatter","slug","G","image","getImage","thumbnail","alt","excerpt","date","tags","i","Link","to","style","flexGrow","previousPage","nextPage"],"mappings":"qSAEaA,EAAkBC,wBAAH,qEAAGA,CAAH,kJAcfC,EAAeD,oBAAH,kEAAGA,CAAH,kLAmBZE,EAAqBF,oBAAH,wEAAGA,CAAH,uXA8BlBG,EAAYH,mBAAH,+DAAGA,CAAH,ySAyBTI,EAAkBJ,oBAAH,qEAAGA,CAAH,0CAKfK,EAAWL,oBAAH,8DAAGA,CAAH,gQAkBRM,EAAWN,wBAAH,oDAAGA,CAAH,qT,8ICqBrB,UA5FwC,SAAC,GAAoC,IAAlCO,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAE1DP,EAOEQ,KANFJ,EAMEI,KALFX,EAKEW,KAJFP,EAIEO,KAHFN,EAGEM,KAFFL,EAEEK,KADFT,EACES,KAGIC,EAA0BJ,EAA1BI,YAAaC,EAAaL,EAAbK,SACfC,EACY,IAAhBF,GACOF,EAASK,SAAZ,KAAwBC,QAAQ,KAAM,MACnCN,EAASK,SAAZ,KACGC,QADH,IACeJ,EAAe,KAC3BI,QAAQ,KAAM,KACjBC,EAAaP,EAASK,SACzBC,QAAQ,IAAYR,EAAYU,IAAIC,eAAgB,IACpDH,QAAQ,KAAM,KAGXI,EAA0B,IAAhBR,EACVS,EAAST,IAAgBC,EACzBS,EACJV,EAAc,GAAM,EAApB,GAA2BE,EAA3B,GAA2CA,GAAWF,EAAc,GAChEW,EAAO,GAAGT,GAAWF,EAAc,GACnCY,EAAQf,EAAKgB,OAAOC,MAE1B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAOnB,EAAYU,IAAKR,SAAUA,IACvC,wBAAMkB,GAAG,YAAYC,UAAU,aAC7B,gBAAC,KAAD,KAAerB,EAAYU,KAC3B,gBAAClB,EAAD,KACGwB,EAAMM,KAAI,SAACC,GAAD,OACT,gBAACxB,EAAD,CAAUyB,IAAKD,EAAKE,KAAKC,YAAYC,MACnC,gBAACjC,EAAD,KACE,gBAAC,EAAAkC,EAAD,CACEC,OACEC,OACEP,EAAKE,KAAKC,YAAYK,WAG1BC,IAAKT,EAAKE,KAAKC,YAAYP,MAC3BE,UAAU,cAGd,gBAAC1B,EAAD,KACE,gBAACC,EAAD,KAAY2B,EAAKE,KAAKC,YAAYP,OAClC,gBAACtB,EAAD,KACG0B,EAAKE,KAAKC,YAAYO,QACvB,2BACCV,EAAKE,KAAKC,YAAYQ,KACvB,gBAACpC,EAAD,KACGyB,EAAKE,KAAKC,YAAYS,KAAKb,KAC1B,SAACZ,EAAa0B,GAAd,OACE,gBAAC,EAAAC,KAAD,CACEb,IAAKY,EACLf,UAAU,MACViB,GAAE,GAAK7B,EAAa,IAAYC,EAAIC,gBAEnCD,QAMX,gBAAC,EAAA2B,KAAD,CACEC,GAAE,SAAWf,EAAKE,KAAKC,YAAYC,KACnCN,UAAU,aAFZ,mBAUR,uBAAKkB,MAAO,CAAEC,SAAU,KACxB,gBAAC,KAAD,CACE5B,QAASA,EACTC,OAAQA,EACR4B,aAAc3B,EACd4B,SAAU3B","file":"component---src-templates-post-tag-tsx-e96d2a2a1e6c7079f5b1.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const PostCardWrapper = styled.article`\r\n  display: grid;\r\n  padding: 2rem 0;\r\n  align-items: center;\r\n  grid-auto-rows: 1fr;\r\n  gap: 2rem;\r\n  width: 80%;\r\n  align-self: center;\r\n\r\n  @media (max-width: 960px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const ImageWrapper = styled.div`\r\n  position: relative;\r\n  flex-basis: 40%;\r\n  overflow: hidden;\r\n  display: flex;\r\n\r\n  @media (max-width: 640px) {\r\n    flex-basis: 15rem;\r\n    display: none;\r\n  }\r\n\r\n  .post-img {\r\n    right: 0;\r\n    top: 0;\r\n    position: absolute;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const DescriptionWrapper = styled.div`\r\n  flex-basis: 60%;\r\n  position: relative;\r\n  margin: 0 2rem;\r\n\r\n  &:before {\r\n    content: \"\";\r\n    margin-left: -2rem;\r\n    transform: skewX(-3deg);\r\n    background: var(--bg-secondary);\r\n    width: 2rem;\r\n    position: absolute;\r\n    left: -10px;\r\n    top: 0;\r\n    bottom: 0;\r\n  }\r\n\r\n  .post-link {\r\n    text-align: right;\r\n    color: var(--accent-primary);\r\n    display: inline-block;\r\n    position: absolute;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n    padding-bottom: 1rem;\r\n    right: 0;\r\n    bottom: 0;\r\n  }\r\n`;\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 2rem;\r\n  line-height: 2rem;\r\n  text-align: center;\r\n\r\n  &:after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    height: 0.3rem;\r\n    background-color: var(--accent-primary);\r\n    width: 100%;\r\n    border-radius: 0.3rem;\r\n    margin-top: 0.4rem;\r\n  }\r\n\r\n  @media (max-width: 640px) {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nexport const PostDescription = styled.div`\r\n  padding-bottom: 3rem;\r\n  text-align: left;\r\n`;\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  align-self: center;\r\n\r\n  .tag {\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n    color: var(--text-primary);\r\n    text-decoration: none;\r\n    transition: all, 0.5s;\r\n    border-radius: 0.3rem;\r\n    margin-right: 0.5em;\r\n    line-height: 1.5em;\r\n    font-size: 0.75rem;\r\n    padding: 0 0.5em;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const PostCard = styled.article`\r\n  display: flex;\r\n  overflow: hidden;\r\n  flex-direction: row;\r\n  background-color: var(--bg-secondary);\r\n  line-height: 1.4rem;\r\n  border-radius: 0.3rem;\r\n  width: 100%;\r\n  height: 100%;\r\n  color: var(--text-primary);\r\n  margin: 0 auto;\r\n  justify-content: center;\r\n  box-shadow: 0px 1rem 1.5rem rgba(0, 0, 0, 0.5);\r\n\r\n  @media (max-width: 640px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { Link, graphql } from \"gatsby\";\r\nimport { getImage, GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\r\nimport * as PostCardItems from \"Blog/PostCard\";\r\nimport Pagination from \"Common/Pagination\";\r\nimport { AllPostTitle } from \"Blog/Post\";\r\nimport Layout from \"Layout/Layout\";\r\nimport SEO from \"Common/Seo\";\r\n\r\nexport interface PostTagProps {\r\n  pageContext: IPageContext;\r\n  data: IData;\r\n  location: { pathname: string };\r\n}\r\n\r\ninterface IData {\r\n  allMdx: {\r\n    edges: [\r\n      node: {\r\n        frontmatter: {\r\n          date: string;\r\n          excerpt: string;\r\n          slug: string;\r\n          title: string;\r\n          tags: Array<string>;\r\n          thumbnail: string;\r\n        };\r\n      }\r\n    ];\r\n  };\r\n}\r\n\r\ninterface IPageContext {\r\n  currentPage: number;\r\n  limit: number;\r\n  numPages: number;\r\n  skip: number;\r\n  folder: string;\r\n  tag: string;\r\n}\r\n\r\nconst PostTag: React.FC<PostTagProps> = ({ pageContext, data, location }) => {\r\n  const {\r\n    DescriptionWrapper,\r\n    PostCard,\r\n    PostCardWrapper,\r\n    PostTitle,\r\n    PostDescription,\r\n    PostTags,\r\n    ImageWrapper,\r\n  } = PostCardItems;\r\n\r\n  // Page Route\r\n  const { currentPage, numPages } = pageContext;\r\n  const pagePath =\r\n    currentPage === 1\r\n      ? `${location.pathname}/`.replace(\"//\", \"/\")\r\n      : `${location.pathname}/`\r\n          .replace(`/${currentPage}`, \"/\")\r\n          .replace(\"//\", \"/\");\r\n  const pathPrefix = location.pathname\r\n    .replace(_.kebabCase(pageContext.tag.toLowerCase()), \"\")\r\n    .replace(\"//\", \"/\");\r\n\r\n  // Pagination props\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const previous =\r\n    currentPage - 1 === 1 ? `${pagePath}` : `${pagePath}${currentPage - 1}`;\r\n  const next = `${pagePath}${currentPage + 1}`;\r\n  const posts = data.allMdx.edges;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={pageContext.tag} location={location} />\r\n      <main id=\"blog-main\" className=\"container\">\r\n        <AllPostTitle>{pageContext.tag}</AllPostTitle>\r\n        <PostCardWrapper>\r\n          {posts.map((post: any) => (\r\n            <PostCard key={post.node.frontmatter.slug}>\r\n              <ImageWrapper>\r\n                <GatsbyImage\r\n                  image={\r\n                    getImage(\r\n                      post.node.frontmatter.thumbnail\r\n                    ) as IGatsbyImageData\r\n                  }\r\n                  alt={post.node.frontmatter.title}\r\n                  className=\"post-img\"\r\n                />\r\n              </ImageWrapper>\r\n              <DescriptionWrapper>\r\n                <PostTitle>{post.node.frontmatter.title}</PostTitle>\r\n                <PostDescription>\r\n                  {post.node.frontmatter.excerpt}\r\n                  <br />\r\n                  {post.node.frontmatter.date}\r\n                  <PostTags>\r\n                    {post.node.frontmatter.tags.map(\r\n                      (tag: string, i: number) => (\r\n                        <Link\r\n                          key={i}\r\n                          className=\"tag\"\r\n                          to={`${pathPrefix}${_.kebabCase(tag.toLowerCase())}`}\r\n                        >\r\n                          {tag}\r\n                        </Link>\r\n                      )\r\n                    )}\r\n                  </PostTags>\r\n                </PostDescription>\r\n                <Link\r\n                  to={`/blog/${post.node.frontmatter.slug}`}\r\n                  className=\"post-link\"\r\n                >\r\n                  Read More\r\n                </Link>\r\n              </DescriptionWrapper>\r\n            </PostCard>\r\n          ))}\r\n        </PostCardWrapper>\r\n        <div style={{ flexGrow: 1 }}></div>\r\n        <Pagination\r\n          isFirst={isFirst}\r\n          isLast={isLast}\r\n          previousPage={previous}\r\n          nextPage={next}\r\n        />\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PostTag;\r\n\r\nexport const pageQuery = graphql`\r\n  query ProjectTag($skip: Int!, $limit: Int!, $tag: String, $folder: String) {\r\n    allMdx(\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: {\r\n        fileAbsolutePath: { regex: $folder }\r\n        frontmatter: { tags: { in: [$tag] } }\r\n      }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            excerpt\r\n            slug\r\n            title\r\n            tags\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(\r\n                  width: 480\r\n                  height: 360\r\n                  placeholder: BLURRED\r\n                  layout: FIXED\r\n                  quality: 100\r\n                )\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}