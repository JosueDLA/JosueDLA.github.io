{
    "componentChunkName": "component---src-templates-single-post-tsx",
    "path": "/blog/introduction-to-git",
    "result": {"data":{"current":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introduction to Git\",\n  \"slug\": \"introduction-to-git\",\n  \"date\": \"2021-09-19T00:00:00.000Z\",\n  \"featureImage\": \"images/introduction-to-git.jpg\",\n  \"excerpt\": \"Git is a free and open souce distributed version control system.\",\n  \"thumbnail\": \"../images/git.png\",\n  \"tags\": [\"Git\", \"Linux\", \"Bash\", \"Shell\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction to Git\"), mdx(\"p\", null, \"Git is a version control software designed by Linus Torvalds, designed for efficiency and reliability of maintaining applications versions when they have many source-code files. Git purpose is to keep track of file changes and coordinate the work of several people on shared files.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Git stores changes in a special database called a repository.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Version Control allows you to track change history and work with a team.\")), mdx(\"h2\", null, \"Version Control System\"), mdx(\"p\", null, \"A Version Control System is a system that manages the various changes that are made to the elements of a product or its configuration. There are two types of version control systems:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralized\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Distributed\")), mdx(\"h3\", null, \"Centralized\"), mdx(\"p\", null, \"In a centralized system, all the team must connect to the server to get the latest version of the code, and to share their changes (Ex. Subversion, Team Foundation Server).\"), mdx(\"p\", null, mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"570px\"\n    }\n  }, \"\\n      \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"93%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"display\": \"block\"\n    }\n  }), \"\\n  \", mdx(\"img\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Centralized System\",\n    \"title\": \"Centralized System\",\n    \"src\": \"/static/b8271a8fbd99a4a0bae769103f989f30/432e7/centralized-git.png\",\n    \"srcSet\": [\"/static/b8271a8fbd99a4a0bae769103f989f30/5a46d/centralized-git.png 300w\", \"/static/b8271a8fbd99a4a0bae769103f989f30/432e7/centralized-git.png 570w\"],\n    \"sizes\": \"(max-width: 570px) 100vw, 570px\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    },\n    \"loading\": \"lazy\",\n    \"decoding\": \"async\"\n  }), \"\\n    \")), mdx(\"h3\", null, \"Distributed\"), mdx(\"p\", null, \"In a distributed system, each member has a copy of the project, allowing snapshots to be saved locally; it also allows you to synchronize your work with other contributors (Ex. Git, Mercurial).\"), mdx(\"p\", null, mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"673px\"\n    }\n  }, \"\\n      \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"49.66666666666666%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"display\": \"block\"\n    }\n  }), \"\\n  \", mdx(\"img\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Distributed Systems\",\n    \"title\": \"Distributed Systems\",\n    \"src\": \"/static/6300c16bd76e7d122f2b4e769a3fdc47/c391c/distributed-git.png\",\n    \"srcSet\": [\"/static/6300c16bd76e7d122f2b4e769a3fdc47/5a46d/distributed-git.png 300w\", \"/static/6300c16bd76e7d122f2b4e769a3fdc47/0a47e/distributed-git.png 600w\", \"/static/6300c16bd76e7d122f2b4e769a3fdc47/c391c/distributed-git.png 673w\"],\n    \"sizes\": \"(max-width: 673px) 100vw, 673px\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    },\n    \"loading\": \"lazy\",\n    \"decoding\": \"async\"\n  }), \"\\n    \")), mdx(\"h2\", null, \"Advantages of Using Git\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It\\u2019s free\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open Source\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fast\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scalable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allows branching/merging\")), mdx(\"h2\", null, \"Configuration Levels\"), mdx(\"p\", null, \"Git allows us to configure it at different levels:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"System:\"), \" All users\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Global:\"), \" All repositories of the current user\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Local:\"), \" The current repository\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git config --[level] [setting] \\\"[name]\\\"           # Command structure\\n> git config --global user.name \\\"Jhon Doe\\\"          # Set username\\n> git config --global user.email jhondoe@gmail.com  # Set user email\\n> git config --global core.editor \\\"code --wait\\\"     # Set default editor\\n\")), mdx(\"h3\", null, \"End of Lines\"), mdx(\"p\", null, \"Its important to configure the end of line setting when working with a team that uses different Operating Systems, this is due to the way different Operating Systems manage end of lines. On Windows end of liens are marked with two characters \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\r\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \" but on other operating systems such as MacOS and Linux end of lines are marked only with one character \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\r\"), \". To fix this we need to configure a setting called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"core.autocrlf\"), \". This setting will tell Git to manage end of line depending on which OS we are using.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git config --global core.autocrlf input           # MacOS/Linux\\n> git config --global core.autocrlf true            # Windows\\n\")), mdx(\"h1\", null, \"The Basics\"), mdx(\"h2\", null, \"Workflow\"), mdx(\"p\", null, \"When we are working in a project we usually update, create, and delete files. We keep doing this action until we have a version of the project that we are happy with. Once we are happy with our project, we must commit the changes so Git can manage our files. But before we commit changes, we need to include them in the Staging Area. This area stores the files that we want to include in the next snapshot stored by git.\"), mdx(\"p\", null, mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"643px\"\n    }\n  }, \"\\n      \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"27%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"display\": \"block\"\n    }\n  }), \"\\n  \", mdx(\"img\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Git Workflow\",\n    \"title\": \"Git Workflow\",\n    \"src\": \"/static/6e55dc891f82f22d9ec5e3b8f4c61f21/b5bda/workflow.png\",\n    \"srcSet\": [\"/static/6e55dc891f82f22d9ec5e3b8f4c61f21/5a46d/workflow.png 300w\", \"/static/6e55dc891f82f22d9ec5e3b8f4c61f21/0a47e/workflow.png 600w\", \"/static/6e55dc891f82f22d9ec5e3b8f4c61f21/b5bda/workflow.png 643w\"],\n    \"sizes\": \"(max-width: 643px) 100vw, 643px\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    },\n    \"loading\": \"lazy\",\n    \"decoding\": \"async\"\n  }), \"\\n    \")), mdx(\"h2\", null, \"Staging Area\"), mdx(\"p\", null, \"The Staging Area is a space where we can add and organize the files that will be included in the next commit (in other words, the next version of the project).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git add [filename]        # Add a single file to the Staging Area\\n> git add .                 # Add all files recursively\\n> git add *.txt             # Add files using patterns\\n\")), mdx(\"h2\", null, \"Git Commit\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"commit\"), \" command records the changes on the repository that are in the staging area. Each commit stores the following information:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Message\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Date/Time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Author\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Complete Snapshot\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git commit -m \\\"[message]\\\"     # Commits with given message\\n> git commit                    # Opens the editor and allow to put descriptions in the commit\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Git compresses the content and doesn\\u2019t store duplicate content.\")), mdx(\"p\", null, \"Skip Staging Area\\nSometimes we need to skip the Staging Area, this is possible but risky. It is highly discouraged and should only be used when the code is to be reviewed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git commit -a -m \\\"[message]\\\"          # Add all files to the Staging Area and commits them\\n> git commit -am \\\"[message]\\\"            # Shorter version\\n\")), mdx(\"h2\", null, \"Removing Files\"), mdx(\"p\", null, \"If we need to remove files, we can use the following commands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git ls-files              # Show information about files and the working tree\\n> git rm [file]             # Removes a file from the working tree\\n> git rm [file1] [file2]    # Remove multiple files from the working tree\\n> git rm *.txt              # Remove files using patterns\\n\")), mdx(\"h2\", null, \"Renaming or Moving Files\"), mdx(\"p\", null, \"Renaming or moving files is a two-step operation:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git add old_file.txt      # Add original file\\n> git add new_file.txt      # Add renamed file\\n\")), mdx(\"p\", null, \"Although this solution works, git provides a special command to rename/move files.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git mv -f \\\"[old name]\\\" \\\"[new name]\\\"   # Renaming/moving folders\\n> git mv [old file] [new file]          # Renaming/moving files\\n\")), mdx(\"h2\", null, \"Ignoring Files\"), mdx(\"p\", null, \"In almost all projects we need to ignore certain files or directories that are unnecessary for the operations of the projects (e.g. logs, binary files etc.).\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gitignore\"), \" file specifies intentionally untracked files that Git should ignore. Files that are been tracked already will not be affected.\"), mdx(\"p\", null, \"Remove a File\\nWe can remove files from the working directory using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rm\"), \" command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git rm -h                 # Help on rm command\\n> git rm [file]             # Remove file from working directory and staging area\\n> git rm --cached [file]    # Remove file from staging area\\n\")), mdx(\"h2\", null, \"Showing Working Directory and Staging Area\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git status\"), \" shows the current state of your working directory and staging area.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git status        # Shows the state of the working directory\\n> git status -s     # Shows the state of the working directory in a concise manner\\n\")), mdx(\"h2\", null, \"Viewing the Staged and Unstaged Changes\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git diff\"), \" command shows the changes between commits, commit and working tree etc.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git diff                 # Shows unstaged changes\\n> git diff --staged        # Shows changes between the stage and commits\\n\")), mdx(\"h2\", null, \"Viewing the Logs\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git log\"), \" command shows the commit logs. Each commit has a unique identifier, this identifier is a 40-character hexadecimal string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git log               # Shows the commit log\\n> git log --oneline     # Shows the commit log in one line\\n> git log --reverse     # Shows the commit log reversed\\n\")), mdx(\"h2\", null, \"Viewing a Commit\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show\"), \" command give us expanded details on the Git objects, such as blobs, trees, commits, tags, etc.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"blobs == files\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"trees == directories\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> git show\\n> git show [commit ID]      # Show a specific commit\\n> git show HEAD             # Show last commit\\n> git show HEAD~1           # Show second to last commit\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"2021-09-19T00:00:00.000Z","excerpt":"Git is a free and open souce distributed version control system.","slug":"introduction-to-git","title":"Introduction to Git","featureImage":{"publicURL":"/static/6e634e22b6c2745ad2bc362b14f17734/introduction-to-git.jpg","childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#282848","images":{"fallback":{"src":"/static/6e634e22b6c2745ad2bc362b14f17734/59c6b/introduction-to-git.jpg","srcSet":"/static/6e634e22b6c2745ad2bc362b14f17734/59c6b/introduction-to-git.jpg 1200w","sizes":"1200px"},"sources":[{"srcSet":"/static/6e634e22b6c2745ad2bc362b14f17734/31cc3/introduction-to-git.webp 1200w","type":"image/webp","sizes":"1200px"}]},"width":1200,"height":628}}}},"id":"094ef589-d008-55f6-91dc-e88e99f7279b"},"previous":{"frontmatter":{"title":"Introduction to Data Warehouses and Dimensional Modeling","slug":"introduction-to-data-warehousing"}},"next":{"frontmatter":{"title":"Introduction to Business Intelligence","slug":"introduction-to-bi"}},"site":{"siteMetadata":{"author":"JosueDLA","description":"Josué de León is a software developer based in Guatemala, he enjoys learning new things and writing about them.","title":"JosueDLA","image":"/home.png","siteUrl":"https://josuedla.github.io"}}},"pageContext":{"id":"094ef589-d008-55f6-91dc-e88e99f7279b","previousPost":"b637dfe2-88d1-54f7-a5f1-440bd35643a3","nextPost":"bd544bbb-8f3f-5709-b96a-90649ab75229"}},
    "staticQueryHashes": ["4102384782"]}