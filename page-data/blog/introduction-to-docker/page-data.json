{"componentChunkName":"component---src-templates-single-post-tsx","path":"/blog/introduction-to-docker","result":{"data":{"current":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introduction to Docker\",\n  \"slug\": \"introduction-to-docker\",\n  \"date\": \"2021-06-28T00:00:00.000Z\",\n  \"featureImage\": \"images/docker.jpg\",\n  \"excerpt\": \"Docker is a technology that allows us to build, run, and ship applications consistently.\",\n  \"thumbnail\": \"../images/docker.png\",\n  \"tags\": [\"Docker\", \"Linux\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Docker\"), mdx(\"h2\", null, \"What is Docker?\"), mdx(\"p\", null, \"Docker is an open-source project that allows the user to automate application deployment using software containers, providing an additional layer of abstraction and virtualization automation of applications across multiple operating systems.\"), mdx(\"p\", null, \"Docker uses the resource isolation feature of the Linux kernel, such as cgroups and namespacces. This allows docker \\u201Ccontainers\\u201D to run independently within a single Linux instance, thus avoiding the overhead of starting and maintaining virtual machines.\"), mdx(\"p\", null, \"Docker solves the problem of the same software not working or behaving the same in different environments. Docker also allows us to run multiple applications with different versions of the same software in parallel without creating conflicts. This is achieved by running the applications in isolation\"), mdx(\"h2\", null, \"Virtual Machines vs Containers\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"container\"), \" is an isolated environment to run an application. It is essentially an operating system process with its own file system. Containers are running instances of an image.\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"virtual machine\"), \" is an abstraction of hardware resources. These are created using hypervisors.\"), mdx(\"p\", null, \"A virtual machine allows us to run applications in isolation. With the disadvantage that each virtual machine needs a complete operating system and a part of the available resources. This makes each virtual machine consume much more resources and its startup is slow. On the contrary, the containers are very light and start quickly since they share the Host\\u2019s kernel (which is already started).\"), mdx(\"h2\", null, \"Docker Architecture\"), mdx(\"p\", null, \"Docker uses a client/Server architecture. Docker has a component that talks to the server using a RESTful API. This \\u201Cserver\\u201D is known as the Docker Engine (or daemon). The server runs in the background and is responsible for doing the heavy lifting.\"), mdx(\"p\", null, mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"692px\"\n    }\n  }, \"\\n      \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"55.333333333333336%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"display\": \"block\"\n    }\n  }), \"\\n  \", mdx(\"img\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Containers are processes\",\n    \"title\": \"Containers are processes\",\n    \"src\": \"/static/e8f0c6d204f5b3d08d7e3f62288419cb/91e7e/process.png\",\n    \"srcSet\": [\"/static/e8f0c6d204f5b3d08d7e3f62288419cb/5a46d/process.png 300w\", \"/static/e8f0c6d204f5b3d08d7e3f62288419cb/0a47e/process.png 600w\", \"/static/e8f0c6d204f5b3d08d7e3f62288419cb/91e7e/process.png 692w\"],\n    \"sizes\": \"(max-width: 692px) 100vw, 692px\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    },\n    \"loading\": \"lazy\",\n    \"decoding\": \"async\"\n  }), \"\\n    \")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Windows 10 includes the Linux kernel in addition to the windows kernel. So we can run Linux applications natively on windows.\")), mdx(\"h2\", null, \"Installing Docker\"), mdx(\"p\", null, \"You can download docker from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.docker.com/get-docker/\"\n  }, \"here\"), \".\"), mdx(\"h2\", null, \"Docker Images\"), mdx(\"p\", null, \"An image is a template that contains instructions with which you can create a Docker container. Often an image is initialized with another image with some additional settings.\"), mdx(\"p\", null, \"An image is a kind of snapshot or template of a virtual machine, but much lighter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker build -t [Name]     # Build an image\\n> docker images              # See all images\\n> docker image ls            # See all images\\n> docker run -it [Image] sh  # Run a shell session of a container.\\n\")), mdx(\"h3\", null, \"An image usually includes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A lightweight operating system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A runtime environment.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Application files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Third party libraries.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Environment variables, etc.\")), mdx(\"h2\", null, \"Workflow\"), mdx(\"p\", null, \"With Docker we can package an application in an image, once we have an image it can be run on any machine that has docker. El registro de docker m\\xE1s popular es \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://hub.docker.com/\"\n  }, \"DockerHub\"), \".\"), mdx(\"p\", null, \"To package an application we must add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \", this plain text file includes the instructions to package the image.\"), mdx(\"h3\", null, \"Dockerfile\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" is a configuration file used to create images. This file indicates what the image will contain and the various commands that will be used to install the different tools used by the image.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-dockerfile\"\n  }, \"# Basic Node Dockerfile\\nFROM node:14.17.0-alpine3.13\\nWORKDIR /my_app\\nCOPY . .\\nRUN npm install\\nEXPOSE 8000\\nENTRYPOINT [\\\"npm\\\", \\\"start\\\"]\\n\")), mdx(\"h3\", null, \"Dockerfile Instructions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FROM:\"), \" Specifies the base image. A base image does not have a parent image specified in its dockerfile. It is created using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FROM scratch\"), \" directive.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WORKDIR:\"), \" Sets the working directory from any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RUN\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CMD\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENTRYPOINT\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"COPY\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ADD\"), \" instruction.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"COPY:\"), \" This instruction copies new files/directories from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<src>\"), \" and adds them to the filesystem of the container at the path \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<dest>\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ADD:\"), \" This instruction copies new files/directories or remote URLs from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<src>\"), \" and adds them to the path \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<dest>\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RUN:\"), \" This instruction will execute any command in a new layer on top of the current image and commit the results. The result image will be used in the next step in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ENV:\"), \" Sets the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<key>\"), \" to the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<value>\"), \". This value will be in the environment for all the subsecuent instructions in the building process.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"EXPOSE:\"), \" Informs Docker that the container listens on the specified network port at runtime. This instuction does not pubhlish the port automatically on the host, it only works as a form of documentation.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USER:\"), \" Sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RUN\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CMD\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENTRYPOINT\"), \" instruction that follow it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CMD:\"), \" This instruction specifies a command or executable to be executed at run time. If omitted an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ENTRYPOINT\"), \" instruction must be used.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ENTRYPOINT:\"), \" This instruction allows you to configure a container that will run as an executable.\"))), mdx(\"h2\", null, \"Optimizing Docker builds\"), mdx(\"p\", null, \"Docker images work through layers, a layer works as a filesystem that only includes modified files.\"), mdx(\"p\", null, mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"632px\"\n    }\n  }, \"\\n      \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"63.66666666666666%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"display\": \"block\"\n    }\n  }), \"\\n  \", mdx(\"img\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Image Layers\",\n    \"title\": \"Image Layers\",\n    \"src\": \"/static/96e1daf7bf7144fef775101c10e5a8de/084e2/layers.png\",\n    \"srcSet\": [\"/static/96e1daf7bf7144fef775101c10e5a8de/5a46d/layers.png 300w\", \"/static/96e1daf7bf7144fef775101c10e5a8de/0a47e/layers.png 600w\", \"/static/96e1daf7bf7144fef775101c10e5a8de/084e2/layers.png 632w\"],\n    \"sizes\": \"(max-width: 632px) 100vw, 632px\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    },\n    \"loading\": \"lazy\",\n    \"decoding\": \"async\"\n  }), \"\\n    \")), mdx(\"p\", null, \"We can imagine each instruction in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" as a new layer. The layers can be seen with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"history\"), \" instruction.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker history [Image]\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"History is read from bottom to top.\")), mdx(\"p\", null, \"Docker has an optimization mechanism included. When rebuilding an image, Docker checks each instruction to see if its conten has changed or not. If it hasn't changed, Docker doesn't rebuild the layer, it just reuses it from its cache.\"), mdx(\"p\", null, \"To optimize the construction of containers we must organize our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" in such a way that the instructions that do not change frequently are above the instructions or files that change frequently.\"), mdx(\"p\", null, mdx(\"span\", {\n    parentName: \"p\",\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"461px\"\n    }\n  }, \"\\n      \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"75%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"display\": \"block\"\n    }\n  }), \"\\n  \", mdx(\"img\", {\n    parentName: \"span\",\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Dockerfile Optimization\",\n    \"title\": \"Dockerfile Optimization\",\n    \"src\": \"/static/fa8c95551a83f58fc1bf0de958a03fa2/f816d/dockerfile.png\",\n    \"srcSet\": [\"/static/fa8c95551a83f58fc1bf0de958a03fa2/5a46d/dockerfile.png 300w\", \"/static/fa8c95551a83f58fc1bf0de958a03fa2/f816d/dockerfile.png 461w\"],\n    \"sizes\": \"(max-width: 461px) 100vw, 461px\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    },\n    \"loading\": \"lazy\",\n    \"decoding\": \"async\"\n  }), \"\\n    \")), mdx(\"h2\", null, \"Tagging Images\"), mdx(\"p\", null, \"Docker tags are simply lables that provide a better way to manage versioning and realeses. Instead of referencing an image by ID, ou can refer to it using tags. This tag can be a codename or a semantic version control.\"), mdx(\"p\", null, \"Creating a tag is easy, to do it we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker tag\"), \" instruction. You can also add a tag during container construction with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-t\"), \" flag.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker build -t [Image]:[Tag] .\\n> docker image tag [Image]:[Current Tag] [Image]:[New tag]\\n> docker image tag [ID] [Image]:[Tag]\\n\")), mdx(\"h3\", null, \"Latest doesn't always mean \\\"latest\\\"\"), mdx(\"p\", null, \"The label \\\"latest\\\" tends to be a bit confusing, despite his meaning. It does not always point to the latest version of an image. It's just automatically applied to images for which we don't specify a tag.\"), mdx(\"h2\", null, \"Sharing Images\"), mdx(\"p\", null, \"To publish an image on DockerHub we must follow the following steps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create the repository in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://hub.docker.com/repository/create\"\n  }, \"DockerHub\"), \" .\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Make sure the image matches the name of the repository.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Rename Image\\n> docker image tag [ID] [New name]:[Tag]\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Login to Docker.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Login to Docker\\n> docker login\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Publish the image.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Push image to DockerHub\\n> docker push [Name]:[Tag]\\n\")), mdx(\"h2\", null, \"Saving images in compresed files\"), mdx(\"p\", null, \"We can save images as compressed files to share them without using DockerHub.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Save image into a .tar file\\n> docker image save -o [Name].tar [Image]\\n\")), mdx(\"p\", null, \"To load these compressed files into an image we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" instruction.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Load image from .tar file\\n> docker image load -i [Name]\\n\")), mdx(\"h2\", null, \"Containers\"), mdx(\"h3\", null, \"Starting Containers\"), mdx(\"p\", null, \"When creating a new container, docker assigns a unique name to each ocntainer or UUID (Universally Unique Identifier).We can give our container a name using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--name\"), \" flag.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker run -d --name [UUID] [Image]\\n\")), mdx(\"h3\", null, \"Container Logs\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker logs\"), \" instruction shows the logs present at runtime.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker logs [container]       # See logs\\n> docker logs -f [container]    # Follow logs\\n> docker logs -t [container]    # See logs with timestamps\\n> docker logs -n 10 [container] # See the last 10 lines\\n\")), mdx(\"h3\", null, \"Publishing Ports\"), mdx(\"p\", null, \"There are two ways to publish ports in docker. Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-P\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" flag. Using the flag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-P\"), \" (uppercase) we can publish all the ports that have been exposed in random order on the host interface. Using the flag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" (lowercase) we can publish a specific port of the contaner in a port of the host.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Publish a specific port\\n> docker run -p [Host port]:[Container port]\\n\")), mdx(\"h3\", null, \"Executing commands in a runing container\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker exec\"), \" instruction allows us to execute a commant ina running container.\\nThe difference between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exec\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" starts a new container, while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exec\"), \" executes a command in a running container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker exec [Container] [Command] # Run a command\\n> docker exec -it [Vontainer] sh    # Start an interactive shell\\n\")), mdx(\"h3\", null, \"Working with containers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Starting and stopping containers\\n> docker stop [Container]\\n> docker start [Container]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Listing containers\\n> docker ps    # List running containers\\n> docker ps -a # List all containers\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"# Removing containers\\n> docker rm [Container]    # Remove container\\n> docker rm -f [Container] # Force removal\\n> docker container prune   # Remove all stopped containers\\n\")), mdx(\"h3\", null, \"Volumes\"), mdx(\"p\", null, \"Volumes are mechanisms that allows us to preserve data generated and used by docker containers. Volumes can be directories on the host or can be stored in the cloud.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"> docker volume ls                         # List volumes\\n> docker volume create [Name]              # Create new volume\\n> docker volume inspect [Name]             # Inspect volume\\n> docker run -v [Container]:[Path] [Image] # Create container with volume\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"2021-06-28T00:00:00.000Z","excerpt":"Docker is a technology that allows us to build, run, and ship applications consistently.","slug":"introduction-to-docker","title":"Introduction to Docker","featureImage":{"publicURL":"/static/ccce312533ddac43e8e258abcefe118c/docker.jpg","childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#282848","images":{"fallback":{"src":"/static/ccce312533ddac43e8e258abcefe118c/59c6b/docker.jpg","srcSet":"/static/ccce312533ddac43e8e258abcefe118c/59c6b/docker.jpg 1200w","sizes":"1200px"},"sources":[{"srcSet":"/static/ccce312533ddac43e8e258abcefe118c/31cc3/docker.webp 1200w","type":"image/webp","sizes":"1200px"}]},"width":1200,"height":628}}}},"id":"9c8638c3-05db-5434-8ee5-1c1c651286ab"},"previous":{"frontmatter":{"title":"Introduction to Business Intelligence","slug":"introduction-to-bi"}},"next":{"frontmatter":{"title":"Introduction to The Linux Command Line","slug":"introduction-to-linux-command-line"}},"site":{"siteMetadata":{"author":"JosueDLA","description":"Josué de León is a software developer based in Guatemala, he enjoys learning new things and writing about them.","title":"JosueDLA","image":"/home.png","siteUrl":"https://josuedla.github.io"}}},"pageContext":{"id":"9c8638c3-05db-5434-8ee5-1c1c651286ab","previousPost":"bd544bbb-8f3f-5709-b96a-90649ab75229","nextPost":"cc0117b8-e03e-5441-902c-519e4367f1a0"}},"staticQueryHashes":["4102384782"]}