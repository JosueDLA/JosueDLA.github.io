{"componentChunkName":"component---src-templates-single-post-tsx","path":"/blog/introduction-to-npm","result":{"data":{"current":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Introduction to NPM\",\n  \"slug\": \"introduction-to-npm\",\n  \"date\": \"2020-11-10T00:00:00.000Z\",\n  \"featureImage\": \"introduction-to-npm.jpg\",\n  \"excerpt\": \"NPM is the default package manager system for Node.js.\",\n  \"thumbnail\": \"../images/javascript.png\",\n  \"tags\": [\"JavaScript\", \"Node.js\", \"NPM\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"NPM Cheat Sheat\"), mdx(\"p\", null, \"NPM is the default package manage system for Node.js\"), mdx(\"h2\", null, \"Check version\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm -v\\n> node -v\\n\")), mdx(\"h2\", null, \"Package.json\"), mdx(\"p\", null, \"The init command creates a file called package.json after a few questions. This file contains all the information known about the project.\"), mdx(\"p\", null, \"Initialize a new project\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm init\\n\")), mdx(\"p\", null, \"Initialize a new project with default configuration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm init --yes\\n\")), mdx(\"h2\", null, \"Packages\"), mdx(\"p\", null, \"NPM allows us to install, update and uninstall packages in a project. NPM also works as a repository for open-source packages created by the community.\"), mdx(\"p\", null, \"Install a package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm install <package>\\n> npm i <package>\\n\")), mdx(\"p\", null, \"The installed package is listed automatically in the package.json file, under the dependencies list. If you are on a older version (<5) you have to manually specify it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm i <package> --save\\n\")), mdx(\"h2\", null, \"Package dependencies\"), mdx(\"p\", null, \"There are multiple types of dependencies, they are listed on the package.json file.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dependencies:\"), \" these are the packages required by your application in production\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"devDependencies:\"), \" packages that are only needed during development and testing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"peerDependencies:\"), \" these packages are only needed when publishing the package. when you include peerDependencies you define a specific version to be installed with your package. If this dependency exist it does nothing, if it does't exist or it is a different version it will show a warning.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"optionalDependencies:\"), \" these are optional dependencies, if they fail to install the installation process will continue.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"bundleDependencies:\"), \" is an array of packages that will be bundled with your package. This is useful when using a 3rd party package that is not available in NPM.\"))), mdx(\"p\", null, \"Install dependencies of a package.json\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm i\\n\")), mdx(\"h2\", null, \"Semantic Versioning\"), mdx(\"p\", null, \"Semantic versioning (or SemVer for short) is a convention or standard when defining software version, depending on the nature of change that is being introduced.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Major:\"), \" introduces a drastic change in the software. Usually not compatible with previous versions.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Minor:\"), \" changes that add a new feature or modify an existing one, but it is still compatible with previous versions.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Patch:\"), \" changes that fixes a bug and are backward compatible.\"))), mdx(\"p\", null, \"SemVer Structure\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Major.Minor.Patch\\n\")), mdx(\"h3\", null, \"Tilde Ranges (~)\"), mdx(\"p\", null, \"Allow patch-level changes if a minor version is specified on the comparator. Allow minor-level changes if not.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"~1.2.3:\"), \" >=1.2.3 < 1.3.0\"), mdx(\"h3\", null, \"Carret Ranges (^)\"), mdx(\"p\", null, \"Allow changes that don't modify major versions.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"^1.2.3:\"), \" >= 1.2.3 < 2.0.0\"), mdx(\"h3\", null, \"Static Range\"), mdx(\"p\", null, \"Only allows to install a certain version.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1.2.3:\"), \" == 1.2.3\"), mdx(\"h2\", null, \"Working with packages\"), mdx(\"h3\", null, \"Install / Uninstall a package\"), mdx(\"p\", null, \"Install a specific verrsion of a package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm i <package>@<version>\\n\")), mdx(\"p\", null, \"Install a development package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm i <package>@<version>\\n\")), mdx(\"p\", null, \"Uninstall a package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm uninstall <package>\\n> npm un <package>\\n\")), mdx(\"h3\", null, \"List\"), mdx(\"p\", null, \"NPM list shows all the installed packages and their dependencies version in a tree structure.\"), mdx(\"p\", null, \"Show installed packages and dependencies\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm list\\n\")), mdx(\"p\", null, \"Show only installed packages\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm list --depth=0\\n\")), mdx(\"h3\", null, \"View\"), mdx(\"p\", null, \"NPM view shows information about a certain package.\"), mdx(\"p\", null, \"View package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm view <package>\\n\")), mdx(\"p\", null, \"View package dependencies\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm view <package> dependencies\\n\")), mdx(\"p\", null, \"View all versions of a package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm view <package> versions\\n\")), mdx(\"h3\", null, \"Outdated\"), mdx(\"p\", null, \"This command will check the registry to see if any installed packages are currently outdated.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm outdated\\n\")), mdx(\"h3\", null, \"Update\"), mdx(\"p\", null, \"This command will update all the pacakes listed to the latest version, respecting SemVer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm update\\n\")), mdx(\"h3\", null, \"Update with npm-check-update (ncu)\"), mdx(\"p\", null, \"npm-check-updates upgrades your package.json dependencies to the latest version, ignoring SemVer.\"), mdx(\"p\", null, \"Install npm-check-update globaly\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm i -g npm-check-updates\\n\")), mdx(\"p\", null, \"Update package.json\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm-check-updates -u\\n> ncu -u\\n\")), mdx(\"p\", null, \"Update packages\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm i\\n\")), mdx(\"h2\", null, \"Publish a package\"), mdx(\"p\", null, \"To publish a package you will need a NPM accout (you can register \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/signup\"\n  }, \"here\"), \"), you can also register via terminal using the NPM CLI.\"), mdx(\"p\", null, \"Register using NPM\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm adduser\\n\")), mdx(\"p\", null, \"Login using NPM\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm login\\n\")), mdx(\"p\", null, \"publish a package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm publish\\n\")), mdx(\"h2\", null, \"Update a published package\"), mdx(\"p\", null, \"To update a published pacakge you will need to have a new software version, you can change the version of the software manually, or change it via NPM CLI.\"), mdx(\"p\", null, \"New major version\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm version major\\n\")), mdx(\"p\", null, \"New minor version\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm version minor\\n\")), mdx(\"p\", null, \"New patch version\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm version patch\\n\")), mdx(\"p\", null, \"Finaly you can update your package\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"> npm publish\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"2020-11-10T00:00:00.000Z","excerpt":"NPM is the default package manager system for Node.js.","slug":"introduction-to-npm","title":"Introduction to NPM","lang":null,"featureImage":{"publicURL":"/static/252339af784e05fa1d23b49924247937/introduction-to-npm.jpg","childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#181848","images":{"fallback":{"src":"/static/252339af784e05fa1d23b49924247937/59c6b/introduction-to-npm.jpg","srcSet":"/static/252339af784e05fa1d23b49924247937/59c6b/introduction-to-npm.jpg 1200w","sizes":"1200px"},"sources":[{"srcSet":"/static/252339af784e05fa1d23b49924247937/31cc3/introduction-to-npm.webp 1200w","type":"image/webp","sizes":"1200px"}]},"width":1200,"height":628}}}},"id":"6dea9334-429c-55f5-914e-d47fa4d23244"},"previous":{"frontmatter":{"title":"Introduction to Node.js","slug":"introduction-to-nodejs"}},"next":{"frontmatter":{"title":"Introduction to Pipenv","slug":"introduction-to-pipenv"}},"site":{"siteMetadata":{"author":"JosueDLA","description":"Josué de León is a software developer based in Guatemala, he enjoys learning new things and writing about them.","title":"JosueDLA","image":"/home.png","siteUrl":"https://josuedla.github.io"}}},"pageContext":{"id":"6dea9334-429c-55f5-914e-d47fa4d23244","previousPost":"c9d6a3f3-8f90-5f0d-a92a-db4e43ff6dd4","nextPost":"a1e83f95-9cdb-5b97-8a06-fb0dbbe056b7"}},"staticQueryHashes":["1387114636"]}